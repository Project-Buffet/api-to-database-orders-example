<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:paycor-public-api="http://www.mulesoft.org/schema/mule/paycor-public-api" xmlns:file="http://www.mulesoft.org/schema/mule/file"
	xmlns:snowflake="http://www.mulesoft.org/schema/mule/snowflake"
	xmlns:ee="http://www.mulesoft.org/schema/mule/ee/core" xmlns:bti="http://www.mulesoft.org/schema/mule/ee/bti" xmlns:db="http://www.mulesoft.org/schema/mule/db" xmlns:vm="http://www.mulesoft.org/schema/mule/vm" xmlns:http="http://www.mulesoft.org/schema/mule/http" xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd
http://www.mulesoft.org/schema/mule/vm http://www.mulesoft.org/schema/mule/vm/current/mule-vm.xsd
http://www.mulesoft.org/schema/mule/db http://www.mulesoft.org/schema/mule/db/current/mule-db.xsd
http://www.mulesoft.org/schema/mule/ee/bti http://www.mulesoft.org/schema/mule/ee/bti/current/mule-bti-ee.xsd
http://www.mulesoft.org/schema/mule/ee/core http://www.mulesoft.org/schema/mule/ee/core/current/mule-ee.xsd
http://www.mulesoft.org/schema/mule/snowflake http://www.mulesoft.org/schema/mule/snowflake/current/mule-snowflake.xsd
http://www.mulesoft.org/schema/mule/file http://www.mulesoft.org/schema/mule/file/current/mule-file.xsd
http://www.mulesoft.org/schema/mule/paycor-public-api http://www.mulesoft.org/schema/mule/paycor-public-api/current/mule-paycor-public-api.xsd">
	<http:listener-config name="HTTP_Listener_config" doc:name="HTTP Listener config" doc:id="eaf2b1f4-1bb7-4c44-be51-e515003822db" >
		<http:listener-connection host="0.0.0.0" port="8081" />
	</http:listener-config>
	<http:request-config name="HTTP_Request_configuration" doc:name="HTTP Request configuration" doc:id="668814e3-7a12-43c1-8672-51e04389ef79" >
		<http:request-connection host="634e2ac6f34e1ed82684aec8.mockapi.io" protocol="HTTPS"/>
	</http:request-config>
	<db:config name="Database_Config2" doc:name="Database Config" doc:id="f41922c5-ce75-469f-9028-b7ee34e2b54a" >
		<db:mssql-connection host="${sqlserver.host}" instanceName="${sqlserver.instance}" port="${sqlserver.port}" user="${sqlserver.user}" password="${sqlserver.password}" databaseName="${sqlserver.database}" />
	</db:config>
	<configuration-properties doc:name="Configuration properties" doc:id="850f62dd-f404-472c-b63c-d021b9eae7aa" file="credentials/mdengler-credentials-file.properties" />
	<flow name="api-to-database-orders-example" doc:id="8341cbbb-22fd-44bd-9abb-3b50a5b91dd6" >
		<http:listener doc:name="Listener" doc:id="069c286c-4ca3-4771-91b0-1767c0236f63" config-ref="HTTP_Listener_config" path="/getOrders"/>
		<http:request method="GET" doc:name="GET Order Data from REST API" doc:id="a6abced7-1a9c-4aa1-b044-49399ffc1650" config-ref="HTTP_Request_configuration" path="/orders" />
		<ee:transform doc:name="Transform JSON to Java" doc:id="8fd52c0c-ab56-482c-b815-4f4b65ed0125">
			<ee:message>
				<ee:set-payload><![CDATA[output application/java
---
payload map ( payload01 , indexOfPayload01 ) -> {
	Order_ID: payload01.orderID,
	Channel: payload01.channel,
	Payment_Method: payload01.paymentMethod,
	Account: payload01.accountName,
	Order_Status: payload01.orderStatus,
	Email: payload01.email,
	Product_Name: payload01.productName,
	Transaction_Date: payload01.transactionDate,
	Shipping_Method: payload01.shippingMethod,
	Brand_Name: payload01.productBrand,
	Currency: payload01.currency,
	Price_Per_Item: payload01.pricePerItem,
	Shipping_Address: payload01.shippingAddress,
	Phone: payload01.phone,
	SKU: payload01.productSKU,
	Quantity_Ordered: payload01.quantity
}]]></ee:set-payload>
			</ee:message>
		</ee:transform>
		<foreach doc:name="For Each" doc:id="1684e20b-d7e1-4095-b8a4-4d24230f208b" >
			<db:select doc:name="Check if Record Exists in Database" doc:id="0267c7c2-6aad-4d67-aa93-fcdbaec05873" config-ref="Database_Config2" target="recordcount">
			<db:sql><![CDATA[select count(1) as recordcount from orders2 where Order_ID=:Order_ID]]></db:sql>
			<db:input-parameters><![CDATA[#[{Order_ID:payload.Order_ID as String}]]]></db:input-parameters>
		</db:select>
			<choice doc:name="Choice" doc:id="9a502eac-c181-4b0c-acbf-340003d7790d">
			<when expression="#[vars.recordcount.RECORDCOUNT[0]==1]">
					<db:update doc:name="Update Existing Record" doc:id="0e8f02ba-7e14-46a7-ab07-09de0beb5368" config-ref="Database_Config2">
					<db:sql><![CDATA[UPDATE orders2 SET Account=:Account, Email=:Email, Phone=:Phone, Transaction_Date=:Transaction_Date, Order_Status=:Order_Status, SKU=:SKU, Brand_Name=:Brand_Name, Product_Name=:Product_Name, Price_Per_Item=:Price_Per_Item, Quantity_Ordered=:Quantity_Ordered, Shipping_Method=:Shipping_Method, Shipping_Address=:Shipping_Address, Payment_Method=:Payment_Method, Currency=:Currency, Channel=:Channel, Order_ID=:Order_ID where Order_ID=:Order_ID]]></db:sql>
					<db:input-parameters><![CDATA[#[payload]]]></db:input-parameters>
				</db:update>
					<logger level="INFO" doc:name="Logger" doc:id="7e19aa3f-ffc4-4b6c-8546-800d9e1056fa" message='#["\n\n\nExisting order updated!"]' />
			</when>
				<otherwise>
					<db:insert doc:name="Insert New Record" doc:id="4c2ca782-9371-477d-8157-515e0f9bbbb8" config-ref="Database_Config2">
					<db:sql><![CDATA[INSERT INTO orders2 (
	Account,
	Email,
	Phone,
	Transaction_Date,
	Order_Status,
	SKU,
	Brand_Name,
	Product_Name,
	Price_Per_Item,
	Quantity_Ordered,
	Shipping_Method,
	Shipping_Address,
	Payment_Method,
	Currency,
	Channel,
	Order_ID
) VALUES (
	:Account,
	:Email,
	:Phone,
	:Transaction_Date,
	:Order_Status,
	:SKU,
	:Brand_Name,
	:Product_Name,
	:Price_Per_Item,
	:Quantity_Ordered,
	:Shipping_Method,
	:Shipping_Address,
	:Payment_Method,
	:Currency,
	:Channel,
	:Order_ID
)]]></db:sql>
					<db:input-parameters><![CDATA[#[payload]]]></db:input-parameters>
				</db:insert>
					<logger level="INFO" doc:name="Logger" doc:id="1666b271-4985-434c-aaad-1a9d29b725b5" message='#["\n\n\nNew order created!"]' />
			</otherwise>
		</choice>
		</foreach>
		<ee:transform doc:name="Transform Message" doc:id="4f76a64a-ab52-475b-a26d-a7b5136e0aa6">
				<ee:message>
					<ee:set-payload><![CDATA["Order(s) moved to NSAW!"]]></ee:set-payload>
				</ee:message>
			</ee:transform>
	</flow>
</mule>
